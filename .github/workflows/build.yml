name: Build Executable

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Số phiên bản'
        required: true
        default: '1.0.0'
        type: string

permissions: write-all

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Generate version number
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build with script
        run: |
          .\build.bat

      - name: Move executable to root
        shell: pwsh
        run: |
          if (Test-Path "dist/main.exe") {
            Move-Item -Path "dist/main.exe" -Destination "app.exe" -Force
          } else {
            Write-Error "File dist/main.exe not found."
            exit 1
          }

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-v${{ steps.version.outputs.version }}
          path: app.exe

      - name: Create Release Description
        id: create_description
        shell: pwsh
        run: |
          "## 🚀 Phiên bản v${{ steps.version.outputs.version }}" | Out-File -FilePath release_description.txt
          "" | Add-Content release_description.txt

          "📅 Ngày phát hành: $(Get-Date -Format 'dd/MM/yyyy')" | Add-Content release_description.txt
          "" | Add-Content release_description.txt

          "### 📝 Các thay đổi trong phiên bản này" | Add-Content release_description.txt
          "" | Add-Content release_description.txt

          git fetch --tags --unshallow
          $latestTag = $(git describe --tags --abbrev=0 2>$null)

          function Format-Commit {
            param(
              [string]$CommitMessage,
              [string]$CommitHash
            )

            if ($CommitMessage -match '^([^:]+):(.+)$') {
              $type = $matches[1]
              $msg = $matches[2].Trim()

              switch ($type) {
                'feat' { "  ✨ [$msg](../../commit/$CommitHash)" }
                'fix' { "  🐛 [$msg](../../commit/$CommitHash)" }
                'docs' { "  📚 [$msg](../../commit/$CommitHash)" }
                'style' { "  💄 [$msg](../../commit/$CommitHash)" }
                'refactor' { "  ♻️ [$msg](../../commit/$CommitHash)" }
                'perf' { "  ⚡️ [$msg](../../commit/$CommitHash)" }
                'test' { "  🧪 [$msg](../../commit/$CommitHash)" }
                'build' { "  📦 [$msg](../../commit/$CommitHash)" }
                'ci' { "  👷 [$msg](../../commit/$CommitHash)" }
                'chore' { "  🔧 [$msg](../../commit/$CommitHash)" }
                default { "  • [$msg](../../commit/$CommitHash)" }
              }
            } else {
              "  • [$CommitMessage](../../commit/$CommitHash)"
            }
          }

          if ($latestTag) {
            $commitCount = $(git rev-list --count "${latestTag}..HEAD")
            "Bao gồm ${commitCount} thay đổi từ phiên bản ${latestTag}:" | Add-Content release_description.txt
            "" | Add-Content release_description.txt

            "#### ✨ Tính năng mới" | Add-Content release_description.txt
            git log --pretty=format:"%s|%H" "${latestTag}..HEAD" | Where-Object { $_ -match '^feat:' } | ForEach-Object {
              $commit = $_.Split('|')
              Format-Commit -CommitMessage $commit[0] -CommitHash $commit[1] | Add-Content release_description.txt
            }
            "" | Add-Content release_description.txt

            "#### 🐛 Sửa lỗi" | Add-Content release_description.txt
            git log --pretty=format:"%s|%H" "${latestTag}..HEAD" | Where-Object { $_ -match '^fix:' } | ForEach-Object {
              $commit = $_.Split('|')
              Format-Commit -CommitMessage $commit[0] -CommitHash $commit[1] | Add-Content release_description.txt
            }
            "" | Add-Content release_description.txt

            "#### 🔄 Các thay đổi khác" | Add-Content release_description.txt
            git log --pretty=format:"%s|%H" "${latestTag}..HEAD" | Where-Object { $_ -notmatch '^(feat|fix):' } | ForEach-Object {
              $commit = $_.Split('|')
              Format-Commit -CommitMessage $commit[0] -CommitHash $commit[1] | Add-Content release_description.txt
            }
            "" | Add-Content release_description.txt

            "#### 📋 Chi tiết thay đổi" | Add-Content release_description.txt
            git log --pretty=format:"<details><summary><b>[%s](../../commit/%H)</b></summary>%n%n``````diff%n%b``````%n</details>%n" "${latestTag}..HEAD" | Add-Content release_description.txt
          } else {
            "Các cập nhật gần đây:" | Add-Content release_description.txt
            "" | Add-Content release_description.txt
            git log --pretty=format:"%s|%H" | Select-Object -First 10 | ForEach-Object {
              $commit = $_.Split('|')
              Format-Commit -CommitMessage $commit[0] -CommitHash $commit[1] | Add-Content release_description.txt
            }
          }

          "" | Add-Content release_description.txt
          "### 📊 Thông tin thêm" | Add-Content release_description.txt
          "• Số build: ${{ github.run_number }}" | Add-Content release_description.txt
          "• Branch: $($env:GITHUB_REF -replace 'refs/heads/')" | Add-Content release_description.txt

          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "• Phát hành thủ công bởi: ${{ github.actor }}" | Add-Content release_description.txt
          }

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: app.exe
          body_path: release_description.txt
          name: Release v${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
